import { genkit } from 'genkit';
import { z } from 'zod';
import { defineFlow } from '@genkit-ai/flow';
import { ai } from '../../genkit'; // Adjusted path based on typical structure

// 1. Define the input schema using Zod
const PersonalizedCourseInputSchema = z.object({
  skills: z.string().describe('The user’s current skills.'),
  knowledge: z.string().describe('The user’s existing knowledge.'),
  passions: z.string().describe('The user’s passions and interests.'),
  niche: z.string().describe('The specific niche for the course.'),
  language: z.string().describe('The target language for the course content (e.g., "Español", "English").'),
});
export type PersonalizedCourseInput = z.infer<typeof PersonalizedCourseInputSchema>;

// 2. Define the output schema using Zod (as generated by AI)
const PersonalizedCourseOutputSchema = z.object({
  courseTitle: z.string(),
  courseDescription: z.string(),
  modules: z.array(z.object({
    moduleTitle: z.string(),
    moduleDescription: z.string(),
    lessons: z.array(z.object({
      lessonTitle: z.string(),
      topics: z.array(z.string()),
    })),
  })),
});
export type PersonalizedCourseOutput = z.infer<typeof PersonalizedCourseOutputSchema>;

// 3. Create the Genkit flow
export const personalizedCourseFlow = defineFlow(
  {
    name: 'personalizedCourseFlow',
    inputSchema: PersonalizedCourseInputSchema,
    outputSchema: PersonalizedCourseOutputSchema,
  },
  async (input) => {
    const prompt = `Generate a personalized course structure based on the following user details: Skills: ${input.skills}, Knowledge: ${input.knowledge}, Passions: ${input.passions}, Niche: ${input.niche}. The course should be in ${input.language}.`;

    const llmResponse = await ai.generate({
      prompt: prompt,
      model: 'googleai/gemini-2.0-flash', // Ensure this model is available and configured
      output: { schema: PersonalizedCourseOutputSchema },
      // You can add config options here if needed, e.g., temperature
    });
    return llmResponse.output() || { courseTitle: 'Error', courseDescription: 'Error generating course', modules: [] };
  }
);

// Define a new type for the output that includes IDs
export type PersonalizedCourseModuleWithId = PersonalizedCourseOutput['modules'][0] & {
  id: string;
  lessons: PersonalizedCourseLessonWithId[];
};
export type PersonalizedCourseLessonWithId = PersonalizedCourseOutput['modules'][0]['lessons'][0] & {
  id: string;
};
export interface PersonalizedCourseWithIdsOutput extends Omit<PersonalizedCourseOutput, 'modules'> {
  modules: PersonalizedCourseModuleWithId[];
}


export async function generatePersonalizedCourse(
  input: PersonalizedCourseInput
): Promise<PersonalizedCourseWithIdsOutput> {
  const aiOutput = await personalizedCourseFlow(input);

  // Manually add IDs to modules and lessons
  const modulesWithIds: PersonalizedCourseModuleWithId[] = aiOutput.modules.map((module, moduleIndex) => ({
    ...module,
    id: `mod-${Date.now()}-${moduleIndex}`,
    lessons: module.lessons.map((lesson, lessonIndex) => ({
      ...lesson,
      id: `les-${Date.now()}-${moduleIndex}-${lessonIndex}`,
    })),
  }));

  return {
    ...aiOutput,
    modules: modulesWithIds,
  };
}
