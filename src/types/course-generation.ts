// src/types/course-generation.ts
import { z } from 'zod';

// Input Schema and Type
export const PersonalizedCourseInputSchema = z.object({
  skills: z.string().describe('The user’s current skills.'),
  knowledge: z.string().describe('The user’s existing knowledge.'),
  passions: z.string().describe('The user’s passions and interests.'),
  niche: z.string().describe('The specific niche for the course.'),
  language: z.string().describe('The target language for the course content (e.g., "Español", "English").'),
});
export type PersonalizedCourseInput = z.infer<typeof PersonalizedCourseInputSchema>;

// Output Schema and Type (as generated by AI for the flow)
export const PersonalizedCourseOutputSchema = z.object({
  courseTitle: z.string(),
  courseDescription: z.string(),
  modules: z.array(z.object({
    moduleTitle: z.string(),
    moduleDescription: z.string(),
    lessons: z.array(z.object({
      lessonTitle: z.string(),
      topics: z.array(z.string()),
    })),
  })),
});
export type PersonalizedCourseOutput = z.infer<typeof PersonalizedCourseOutputSchema>;

// Types for the output that includes manually added IDs
export type PersonalizedCourseLessonWithId = PersonalizedCourseOutput['modules'][0]['lessons'][0] & {
  id: string;
};

export type PersonalizedCourseModuleWithId = PersonalizedCourseOutput['modules'][0] & {
  id: string;
  lessons: PersonalizedCourseLessonWithId[];
};

// This interface is used for the final shape of the data with IDs
export interface PersonalizedCourseWithIdsOutput extends Omit<PersonalizedCourseOutput, 'modules'> {
  modules: PersonalizedCourseModuleWithId[];
}
